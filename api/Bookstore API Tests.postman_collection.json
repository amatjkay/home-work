{
	"info": {
		"_postman_id": "533df4a0-fc35-4d8b-ba34-12074d970e2e",
		"name": "Bookstore API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19435729"
	},
	"item": [
		{
			"name": "1. Create user with error - username already exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 406\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"Error message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"User exists!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userName\": \"existingUser\",\n    \"password\": \"Password123!\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://bookstore.demoqa.com/Account/v1/User",
					"protocol": "https",
					"host": [
						"bookstore",
						"demoqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"User"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. Create user with error - password does not meet requirements",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message contains password requirement\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"Passwords must have at least one non alphanumeric character\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userName\": \"{{$randomUserName}}\",\n    \"password\": \"weak\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://bookstore.demoqa.com/Account/v1/User",
					"protocol": "https",
					"host": [
						"bookstore",
						"demoqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"User"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Create user successfully",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response contains correct username\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"validUserName\"));",
							"});",
							"",
							"// Save the userID for potential future use",
							"pm.environment.set(\"userID\", pm.response.json().userID);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random valid username and password",
							"var validUserName = 'user_' + pm.variables.replaceIn('{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}');",
							"var validPassword = pm.variables.replaceIn('{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}') + '!1A';",
							"",
							"// Set environment variables",
							"pm.environment.set(\"validUserName\", validUserName);",
							"pm.environment.set(\"validPassword\", validPassword);",
							"",
							"console.log(validUserName);",
							"console.log(validPassword);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userName\": \"{{validUserName}}\",\n    \"password\": \"{{validPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://bookstore.demoqa.com/Account/v1/User",
					"protocol": "https",
					"host": [
						"bookstore",
						"demoqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"User"
					]
				}
			},
			"response": []
		},
		{
			"name": "4. Generate token with error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Token is null and result is failure\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.token).to.be.null;",
							"    pm.expect(jsonData.result).to.eql(\"User authorization failed.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userName\": \"{{$randomUserName}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://bookstore.demoqa.com/Account/v1/GenerateToken",
					"protocol": "https",
					"host": [
						"bookstore",
						"demoqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"GenerateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "5. Generate token successfully",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Token is present and result is success\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.token).to.not.be.null;",
							"    pm.expect(jsonData.result).to.eql(\"User authorized successfully.\");",
							"});",
							"",
							"// Save the token for potential future use",
							"pm.environment.set(\"authToken\", pm.response.json().token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userName\": \"{{validUserName}}\",\n    \"password\": \"{{validPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://bookstore.demoqa.com/Account/v1/GenerateToken",
					"protocol": "https",
					"host": [
						"bookstore",
						"demoqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"GenerateToken"
					]
				}
			},
			"response": []
		}
	]
}